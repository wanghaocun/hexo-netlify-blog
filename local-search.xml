<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker Container Misc</title>
    <link href="/posts/docker-container-misc/"/>
    <url>/posts/docker-container-misc/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-memo"><a href="#docker-memo" class="headerlink" title="docker memo"></a>docker memo</h1><h2 id="time-zone-issue"><a href="#time-zone-issue" class="headerlink" title="time zone issue"></a>time zone issue</h2><p>参考笔记 <a href="http://note.youdao.com/noteshare?id=7f541ca3b715591c2d76e7a96325009f&sub=C739A09EFFA746B2AE360F27EC5140A1" target="_blank" rel="noopener">《Docker 时区调整方案》</a></p><ul><li><p>Dockerfile构建重写</p><pre><code class="hljs jboss-cli"><span class="hljs-string">...</span>RUN mkdir -p <span class="hljs-string">/some/path</span> \    &amp;&amp; chmod 777 <span class="hljs-string">/some/path</span> \    ==============================================================    &amp;&amp; rm -rf <span class="hljs-string">/etc/localtime</span> \    &amp;&amp; <span class="hljs-string">/bin/cp</span> <span class="hljs-string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="hljs-string">/etc/localtime</span> \    &amp;&amp; <span class="hljs-keyword">echo</span> 'Asia/Shanghai' &gt;<span class="hljs-string">/etc/timezone</span>    ==============================================================<span class="hljs-string">...</span></code></pre></li><li><p>run 加环境变量 -e TZ（并非所有容器都生效）</p><pre><code class="hljs sh">docker run ... \=====================-e TZ=Asia/Shanghai \=====================...</code></pre></li></ul><h2 id="manual"><a href="#manual" class="headerlink" title="manual"></a>manual</h2><h3 id="docker-practice"><a href="#docker-practice" class="headerlink" title="docker_practice"></a>docker_practice</h3><p><a href="https://vuepress.mirror.docker-practice.com/" target="_blank" rel="noopener">online</a><br><a href="https://github.com/yeasy/docker_practice/wiki/%E7%A6%BB%E7%BA%BF%E9%98%85%E8%AF%BB%E5%8A%9F%E8%83%BD%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">offline</a></p><pre><code class="hljs sh"><span class="hljs-comment"># 为了保持内容为最新，建议每次阅读前先 pull 最新镜像</span><span class="hljs-comment"># GitBook 格式</span>docker pull ccr.ccs.tencentyun.com/dockerpracticesig/docker_practicedocker run -d -p 14000:80 --name docker_practice_gitbook ccr.ccs.tencentyun.com/dockerpracticesig/docker_practice<span class="hljs-comment"># Vuepress 格式</span>docker pull ccr.ccs.tencentyun.com/dockerpracticesig/docker_practice:vuepressdocker run -d -p 24000:80 --name docker_practice_vuepress  ccr.ccs.tencentyun.com/dockerpracticesig/docker_practice:vuepress</code></pre><h3 id="docker-getting-started"><a href="#docker-getting-started" class="headerlink" title="docker/getting-started"></a>docker/getting-started</h3><pre><code class="hljs crmsh">docker pull docker/getting-<span class="hljs-literal">started</span>docker run -d -p <span class="hljs-number">34000</span>:<span class="hljs-number">80</span> --name docker-getting-<span class="hljs-literal">started</span> docker/getting-<span class="hljs-literal">started</span></code></pre><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h2><ul><li><a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a></li><li><a href="https://hub.daocloud.io/repos" target="_blank" rel="noopener">daocloud-道客</a></li><li><a href="https://c.163yun.com/hub#/home" target="_blank" rel="noopener">网易云</a></li></ul><h2 id="mirror"><a href="#mirror" class="headerlink" title="mirror"></a>mirror</h2><p><a href="https://github.com/yeasy/docker_practice/blob/master/install/mirror.md" target="_blank" rel="noopener">docker-practice</a></p><blockquote><p><a href="https://github.com/docker-practice/docker-registry-cn-mirror-test/actions" target="_blank" rel="noopener">mirror-test</a></p></blockquote><ul><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云镜像源</a> <code>需要登录</code></li><li><a href="https://mirrors.ustc.edu.cn/help/dockerhub.html" target="_blank" rel="noopener">科大镜像源</a> <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener"><code>文档</code></a></li><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">道客镜像源</a> <a href="http://guide.daocloud.io/dcs/docker-9153151.html" target="_blank" rel="noopener"><code>文档</code></a></li><li><a href="https://kirk-enterprise.github.io/hub-docs/#/user-guide/mirror" target="_blank" rel="noopener">七牛云镜像源</a></li><li><a href="https://www.163yun.com/help/documents/56918246390157312" target="_blank" rel="noopener">网易云镜像源</a></li><li><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8" target="_blank" rel="noopener">百度云镜像源</a></li></ul><pre><code class="hljs json">&#123;  <span class="hljs-attr">"registry-mirrors"</span>: [    <span class="hljs-string">"https://gsidpfxa.mirror.aliyuncs.com"</span>,    <span class="hljs-string">"https://docker.mirrors.ustc.edu.cn/"</span>,    <span class="hljs-string">"http://f1361db2.m.daocloud.io"</span>,    <span class="hljs-string">"https://reg-mirror.qiniu.com"</span>,    <span class="hljs-string">"https://hub-mirror.c.163.com"</span>,    <span class="hljs-string">"https://mirror.baidubce.com"</span>  ]&#125;</code></pre><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><blockquote><p>基于<code>Debian</code>构建<br><a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">docker hub info</a><br><a href="http://note.youdao.com/noteshare?id=909efdec4e372b8119ad834c73924a17" target="_blank" rel="noopener">custom.cnf</a></p></blockquote><h3 id="8-latest"><a href="#8-latest" class="headerlink" title="8(latest)"></a>8(latest)</h3><pre><code class="hljs sh"><span class="hljs-comment"># Windows cmd</span>docker run -d -p 3306:3306 \-v a:/Docker/mysql/conf/custom.cnf:/etc/mysql/conf.d/custom.cnf \-v a:/Docker/mysql/data:/var/lib/mysql \-v a:/Docker/mysql/logs:/var/<span class="hljs-built_in">log</span>/mysql \-e MYSQL_ROOT_PASSWORD=123456 \-e TZ=Asia/Shanghai \--security-opt seccomp=unconfined \--name mysql --network dev --restart=always \mysql<span class="hljs-comment"># MySQL8中默认字符集[--character-set-server=utf8mb4]</span><span class="hljs-comment"># 默认排序规则[--collation-server=utf8mb4_0900_ai_ci]</span><span class="hljs-comment"># [-e TZ=Asia/Shanghai] -- custom.cnf文件的时区设置修改不了日志文件使用的时区</span><span class="hljs-comment"># [--security-opt seccomp=unconfined] -- 不显示报错信息(mbind: Operation not permitted)（不设置也不影响使用）</span><span class="hljs-comment"># 校验参数</span>SELECT NOW();show variables like <span class="hljs-string">'slow_query%'</span>;show variables like <span class="hljs-string">'long_query_time'</span>;show variables like <span class="hljs-string">'slow_query_log_file'</span>;SELECT @@global.time_zone;</code></pre><blockquote><p>// 暂未发现下面问题，暂不修改<br>MySQL8中，默认排序规则居然从utf8mb4_general_ci修改为了utf8mb4_0900_ai_ci,造成某些特殊字符插入不进去，这里把MySQL的默认排序规则重新修改了utf8mb4_general_ci</p><blockquote><p>collation-server=utf8mb4_general_ci</p></blockquote></blockquote><blockquote><p>mbind: Operation not permitted问题 -&gt; <a href="https://docs.docker.com/engine/security/seccomp/" target="_blank" rel="noopener">seccomp</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/zgpeace/article/details/104114000" target="_blank" rel="noopener">Docker MySQL 8 慢查询日志监控详解</a></p></blockquote><blockquote><p>报错信息[全局可写]<code>mysqld: [Warning] World-writable config file &#39;/etc/mysql/conf.d/custom.cnf&#39; is ignored.</code> -&gt; <a href="https://stackoverflow.com/questions/37001272/fixing-world-writable-mysql-error-in-docker" target="_blank" rel="noopener">sof-link</a> <code>Windows简单将文件改为只读属性即可；Linux使用chmod修改.cnf文件权限(755)</code></p></blockquote><blockquote><p><a href="https://stackoverflow.com/questions/35123049/how-to-change-time-zone-of-error-log-file-of-mysql" target="_blank" rel="noopener">日志时区问题</a></p></blockquote><p>cnf-file:<br><strong><em><a href="https://dev.mysql.com/doc/refman/8.0/en/" target="_blank" rel="noopener">Manual</a></em></strong></p><blockquote><p><a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html" target="_blank" rel="noopener">server-system-variables</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html" target="_blank" rel="noopener">mysql-command-options</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqladmin.html" target="_blank" rel="noopener">mysqladmin</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html" target="_blank" rel="noopener">mysqlbinlog</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html" target="_blank" rel="noopener">mysqldump</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldumpslow.html" target="_blank" rel="noopener">mysqldumpslow</a></p></blockquote><pre><code class="hljs ini"><span class="hljs-section">[client]</span><span class="hljs-attr">default-character-set</span>=utf8mb4<span class="hljs-section">[mysql]</span><span class="hljs-attr">default-character-set</span>=utf8mb4<span class="hljs-section">[mysqld]</span><span class="hljs-comment"># 使用了[-e TZ=Asia/Shanghai]永久设置系统时区</span><span class="hljs-comment">#default_time_zone=+8:00</span><span class="hljs-attr">general-log</span>=<span class="hljs-literal">ON</span><span class="hljs-attr">general-log-file</span>=/var/log/mysql/mysql.log<span class="hljs-attr">log-error</span>=/var/log/mysql/error.log<span class="hljs-attr">slow_query_log</span> =<span class="hljs-literal">ON</span><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">9</span><span class="hljs-attr">slow_query_log_file</span>=/var/log/mysql/slowquery.log<span class="hljs-comment">#log-queries-not-using-indexes=ON</span><span class="hljs-comment">#lower_case_table_names=1</span><span class="hljs-comment"># 解决日志文件中的时区问题</span><span class="hljs-attr">log_timestamps</span> = SYSTEM</code></pre><h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><pre><code class="hljs groovy">docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span>  \-v <span class="hljs-string">a:</span><span class="hljs-regexp">/Docker/</span>mysql<span class="hljs-regexp">/conf/</span>custom.<span class="hljs-string">cnf:</span><span class="hljs-regexp">/etc/</span>mysql<span class="hljs-regexp">/conf.d/</span>custom.cnf \-v <span class="hljs-string">a:</span><span class="hljs-regexp">/Docker/</span>mysql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/</span>mysql \-v <span class="hljs-string">a:</span><span class="hljs-regexp">/Docker/</span>mysql<span class="hljs-regexp">/logs:/</span>var<span class="hljs-regexp">/log/</span>mysql \-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> \-e TZ=Asia/Shanghai \--name mysql5 \--network dev \--restart=always \<span class="hljs-string">mysql:</span><span class="hljs-number">5.7</span> \--character-set-server=utf8mb4 \--collation-server=utf8mb4_unicode_ci</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><blockquote><p>基于<code>Debian</code>构建<br><a href="https://hub.docker.com/_/redis" target="_blank" rel="noopener">docker hub info</a><br><a href="http://note.youdao.com/noteshare?id=16d350cf644fb17b31599b7ce12ca207" target="_blank" rel="noopener">redis.conf</a></p></blockquote><pre><code class="hljs docker"><span class="hljs-comment"># 带验证简单启动 启动aof</span>docker <span class="hljs-keyword">run</span><span class="bash"> -d --name redisdock -p 16379:6379 redis --requirepass <span class="hljs-string">"123456"</span> --appendonly yes</span><span class="hljs-comment"># 挂载conf并持久化启动</span><span class="hljs-comment"># window10</span>docker <span class="hljs-keyword">run</span><span class="bash"> -d -p 6379:6379 -v /a/docker/redis/conf/redis.conf:/etc/redis/redis.conf -v /a/docker/redis/data:/data -e TZ=Asia/Shanghai --name redis --network dev --restart=always redis redis-server /etc/redis/redis.conf</span><span class="hljs-comment"># centos7</span>docker <span class="hljs-keyword">run</span><span class="bash"> -d -p 26379:6379 \-v /usr/<span class="hljs-built_in">local</span>/docker/redis/conf/redis.conf:/etc/redis/redis.conf \-v /usr/<span class="hljs-built_in">local</span>/docker/redis/data:/data \-e TZ=Asia/Shanghai \--name hanlp-api-hub-redis6 --network dev --restart=always \redis:latest redis-server /etc/redis/redis.conf</span></code></pre><blockquote><p>手动设置密码</p></blockquote><pre><code class="hljs docker"><span class="hljs-comment"># 进入redis的容器</span>docker exec -it redis /bin/bash<span class="hljs-comment">#  运行命令</span>redis-cli<span class="hljs-comment"># 查看现有的redis密码</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; config get requirepass<span class="hljs-number">1</span>) <span class="hljs-string">"requirepass"</span><span class="hljs-number">2</span>) <span class="hljs-string">""</span><span class="hljs-comment"># 设置redis密码</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt;config set requirepass ****（****为你要设置的密码）OK</code></pre><p><strong>如何查看已运行的容器的docker run启动参数</strong></p><pre><code class="hljs docker">docker <span class="hljs-keyword">run</span><span class="bash"> --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike redis(查看其它的，更换对应的container名称即可)</span></code></pre><blockquote><p><a href="https://redis.io/topics/config" target="_blank" rel="noopener">redis conf</a><br><a href="http://note.youdao.com/noteshare?id=16d350cf644fb17b31599b7ce12ca207" target="_blank" rel="noopener">my conf</a></p><p>常用参数：</p><pre><code class="hljs yaml"><span class="hljs-comment"># 网络开放</span><span class="hljs-string">bind</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-comment"># 端口号</span><span class="hljs-string">port</span> <span class="hljs-number">6379</span><span class="hljs-comment"># 安全验证</span><span class="hljs-string">requirepass</span> <span class="hljs-string">wanghaocun</span><span class="hljs-comment"># RDB同步时间</span><span class="hljs-string">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span><span class="hljs-string">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><span class="hljs-string">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><span class="hljs-comment"># RDB文件路径</span><span class="hljs-string">dir</span> <span class="hljs-string">./</span><span class="hljs-comment"># 开启AOF</span><span class="hljs-string">appendonly</span> <span class="hljs-literal">yes</span><span class="hljs-comment"># AOF同步时间</span><span class="hljs-string">appendfsync</span> <span class="hljs-string">everysec</span><span class="hljs-comment"># RDB &amp; AOF混合持久化  </span><span class="hljs-string">aof-use-rdb-preamble</span> <span class="hljs-literal">yes</span></code></pre><p><a href="https://redis.io/topics/persistence" target="_blank" rel="noopener">redis persistence</a><br><a href="https://blog.csdn.net/yhl_jxy/article/details/91879874" target="_blank" rel="noopener">混合持久化</a></p></blockquote><h2 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h2><blockquote><p>基于<code>Ubuntu</code>构建<br><a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener">docker hub info</a></p></blockquote><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>create dev<span class="hljs-comment"># 简单启动mongo服务实例</span>docker <span class="hljs-builtin-name">run</span> -d -p 27017:27017 -v /a/Docker/mongo/data:/data/db -e <span class="hljs-attribute">MONGO_INITDB_ROOT_USERNAME</span>=root -e <span class="hljs-attribute">MONGO_INITDB_ROOT_PASSWORD</span>=123456 --name mongo --network dev <span class="hljs-attribute">--restart</span>=always  mongo</code></pre><blockquote><p>Navicat连接后记得勾选<code>查看</code>-&gt;<code>显示隐藏的项目</code>菜单项，否则默认数据库不显示</p></blockquote><h2 id="mongo-express"><a href="#mongo-express" class="headerlink" title="mongo-express"></a>mongo-express</h2><p><a href="https://hub.docker.com/_/mongo-express" target="_blank" rel="noopener">docker hub info</a></p><pre><code class="hljs sh"><span class="hljs-comment"># 简单启动mongo-express服务实例</span>docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSERNAME=root -e ME_CONFIG_MONGODB_ADMINPASSWORD=123456 -e ME_CONFIG_BASICAUTH_USERNAME=admin -e ME_CONFIG_BASICAUTH_PASSWORD=123456 -e ME_CONFIG_OPTIONS_EDITORTHEME=monokai --name mongo-express --network dev --restart=always mongo-express</code></pre><h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h2><blockquote><p>基于<code>Ubuntu</code>构建<br><a href="https://www.rabbitmq.com/admin-guide.html" target="_blank" rel="noopener">admin-guide</a></p></blockquote><pre><code class="hljs properties"><span class="hljs-comment"># [rabbitmq:3-management]带web管理</span><span class="hljs-comment"># 制定USER/PASS不会创建guest用户</span><span class="hljs-comment"># -e TZ="Asia/Shanghai" 不生效</span><span class="hljs-attr">docker</span> <span class="hljs-string">run -d -p 5672:5672 -p 15672:15672 \-h dev-rabbit \-e RABBITMQ_DEFAULT_USER=admin \-e RABBITMQ_DEFAULT_PASS=123456 \--name rabbit \--network dev \rabbitmq:3-management</span><span class="hljs-attr">docker</span> <span class="hljs-string">exec -it rabbitmq /bin/bash</span><span class="hljs-comment"># 服务器状态</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">status</span><span class="hljs-comment"># 用户管理</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">list_users</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">add_user mall mall</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">delete_user mall</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">change_password mall 123456</span><span class="hljs-comment"># tag可以为administrator, monitoring, management</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">set_user_tags mall administrator</span><span class="hljs-comment"># 权限管理</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">list_permissions</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">list_user_permissions mall</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">clear_permissions [-p /mall] mall</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">set_permissions -p /mall mall “.*” “.*” “.*”</span><span class="hljs-comment"># vhost管理</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">add_vhost /mall</span><span class="hljs-attr">rabbitmqctl</span> <span class="hljs-string">delete_vhost /mall</span></code></pre><p>user tags</p><pre><code class="hljs routeros">Comma-separated list of tags <span class="hljs-keyword">to</span> apply <span class="hljs-keyword">to</span> the user. Currently supported by the management plugin:management<span class="hljs-built_in">User </span>can access the management pluginpolicymaker<span class="hljs-built_in">User </span>can access the management plugin <span class="hljs-keyword">and</span> manage policies <span class="hljs-keyword">and</span> parameters <span class="hljs-keyword">for</span> the vhosts they have access <span class="hljs-keyword">to</span>.monitoring<span class="hljs-built_in">User </span>can access the management plugin <span class="hljs-keyword">and</span> see all connections <span class="hljs-keyword">and</span> channels as well as node-related information.administrator<span class="hljs-built_in">User </span>can <span class="hljs-keyword">do</span> everything monitoring can <span class="hljs-keyword">do</span>, manage users, vhosts <span class="hljs-keyword">and</span> permissions, close other user<span class="hljs-string">'s connections, and manage policies and parameters for all vhosts.Note that you can set any tag here; the links for the above four tags are just for convenience.</span></code></pre><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><blockquote><p>Note: Pulling an images requires using a specific version number tag. The latest tag is not supported.</p></blockquote><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><blockquote><p>基于<code>CentOS</code>构建<br><a href="https://hub.docker.com/_/elasticsearch" target="_blank" rel="noopener">docker hub info</a></p></blockquote><pre><code class="hljs docker"><span class="hljs-comment"># 创建容器内桥接网络用于kibana等</span>docker network create dev<span class="hljs-comment"># 运行容器</span>docker <span class="hljs-keyword">run</span><span class="bash"> -d -p 9200:9200 -p 9300:9300 \-e discovery.type=single-node \-e cluster.name=elasticsearch \-e TZ=Asia/Shanghai \-v a:/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-v a:/docker/elasticsearch/data:/usr/share/elasticsearch/data \--name elasticsearch --network dev --restart=always \elasticsearch:7.6.2</span>docker exec -it elasticsearch /bin/bashelasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.<span class="hljs-number">6.2</span>/elasticsearch-analysis-ik-<span class="hljs-number">7.6</span>.<span class="hljs-number">2</span>.zipdocker restart elasticsearch</code></pre><h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><blockquote><p>基于<code>CentOS</code>构建<br><a href="https://hub.docker.com/_/logstash" target="_blank" rel="noopener">docker hub info</a></p></blockquote><pre><code class="hljs angelscript">docker run -d -p <span class="hljs-number">4560</span>:<span class="hljs-number">4560</span> -p <span class="hljs-number">4561</span>:<span class="hljs-number">4561</span> -p <span class="hljs-number">4562</span>:<span class="hljs-number">4562</span> -p <span class="hljs-number">4563</span>:<span class="hljs-number">4563</span> \-v a:/docker/logstash/conf/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \-e TZ=Asia/Shanghai \--name logstash --network dev --restart=always \logstash:<span class="hljs-number">7.6</span><span class="hljs-number">.2</span># 进入容器内部，安装`json_lines`插件logstash-plugin install logstash-codec-json_lines</code></pre><h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><blockquote><p>基于<code>CentOS</code>构建<br><a href="https://hub.docker.com/_/kibana" target="_blank" rel="noopener">docker hub info</a></p></blockquote><pre><code class="hljs routeros"><span class="hljs-comment"># 使用es网络内部连接</span>docker <span class="hljs-builtin-name">run</span> -d -p 5601:5601 \-e <span class="hljs-attribute">TZ</span>=Asia/Shanghai \--name kibana --network dev <span class="hljs-attribute">--restart</span>=always \kibana:7.6.2</code></pre><blockquote><p>Note: In this example, Kibana is using the default configuration and expects to connect to a running Elasticsearch instance at <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a></p></blockquote><blockquote><p>Kibana can be accessed by browser via <a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a> or <a href="http://host-ip:5601" target="_blank" rel="noopener">http://host-ip:5601</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/hello-world/"/>
    <url>/posts/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>No Route to Host (Host Unreachable)问题</title>
    <link href="/posts/1578583262/"/>
    <url>/posts/1578583262/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>基于Docker搭建的项目生产环境，在阿里云ECS上访问所有开放端口的API均正常使用。但是在客户现场部署于内网生产环境时，总有一个API执行失败。这个API也比较特殊，使用流程图说明：</p><pre><code class="hljs mermaid">graph LR;A[Client] --&gt;|1.Request API| B(Server);B --&gt;|6.Response API| A;B --&gt;|2.Send API| C&#123;API Gateway&#125;;C --&gt;|5.Receive API| B;C --&gt;|3.Send Topic| D[Remote Machine];D --&gt;|4.Response Topic| C;</code></pre><blockquote><p>整个流程属于一个大的内网环境（禁止外部访问），</p><p>其中Client/Server/API Gateway同属于一个内网服务器，Remote Machine属于远程设备。</p><p><strong>内网环境存在一层防火墙，限制这台内网服务器与远程设备的通信，仅开放了一个的端口进行远程通信。</strong></p></blockquote><p>所有直来直去的API均可以正常工作，只有一个获取远程设备图片并<code>读取图片</code>然后BASE64编码后返回给客户端的API一直报错。</p><p><code>Server层提供接口给Remote Machine上传本地图片并返回图片地址（存储在Server本地），然后Remote Machine拿着这个图片地址再返回给Server层</code></p><p>Server层也可以顺利拿到Remote Machine返回的图片地址，但是Server层对图片地址进行<code>读取</code>就开始出现报错了（如果Server层直接返回图片地址给Client，浏览器客户端可以正常查看这个图片地址）。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> javax.imageio.ImageIO;<span class="hljs-comment">// x.x.x.x就是Server层的主机地址</span>URL imageUrl = <span class="hljs-string">"http://x.x.x.x/images/xxxx.jpg"</span><span class="hljs-comment">// read报错</span>ImageIO.read(imageUrl)</code></pre><pre><code class="hljs reasonml">Can't get input stream from URL!javax.imageio.IIOException: Can't get input stream from URL!at javax.imageio.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>read(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>java:<span class="hljs-number">1395</span>)at sun.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NativeMethodAccessorImpl</span>.</span></span>invoke0(Native Method)at sun.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NativeMethodAccessorImpl</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NativeMethodAccessorImpl</span>.</span></span>java:<span class="hljs-number">62</span>)at sun.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DelegatingMethodAccessorImpl</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DelegatingMethodAccessorImpl</span>.</span></span>java:<span class="hljs-number">43</span>)at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>java:<span class="hljs-number">498</span>)at org.springframework.web.<span class="hljs-keyword">method</span>.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvocableHandlerMethod</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Invoke(InvocableHandlerMethod.<span class="hljs-params">java</span>:215)</span>at org.springframework.web.<span class="hljs-keyword">method</span>.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvocableHandlerMethod</span>.</span></span>invoke<span class="hljs-constructor">ForRequest(InvocableHandlerMethod.<span class="hljs-params">java</span>:142)</span>at org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.annotation.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServletInvocableHandlerMethod</span>.</span></span>invoke<span class="hljs-constructor">AndHandle(ServletInvocableHandlerMethod.<span class="hljs-params">java</span>:102)</span>at org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.annotation.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestMappingHandlerAdapter</span>.</span></span>invoke<span class="hljs-constructor">HandlerMethod(RequestMappingHandlerAdapter.<span class="hljs-params">java</span>:895)</span>at org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.annotation.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestMappingHandlerAdapter</span>.</span></span>handle<span class="hljs-constructor">Internal(RequestMappingHandlerAdapter.<span class="hljs-params">java</span>:800)</span>at org.springframework.web.servlet.mvc.<span class="hljs-keyword">method</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractHandlerMethodAdapter</span>.</span></span>handle(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractHandlerMethodAdapter</span>.</span></span>java:<span class="hljs-number">87</span>)at org.springframework.web.servlet.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DispatcherServlet</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Dispatch(DispatcherServlet.<span class="hljs-params">java</span>:1038)</span>at org.springframework.web.servlet.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DispatcherServlet</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Service(DispatcherServlet.<span class="hljs-params">java</span>:942)</span>at org.springframework.web.servlet.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FrameworkServlet</span>.</span></span>process<span class="hljs-constructor">Request(FrameworkServlet.<span class="hljs-params">java</span>:998)</span>at org.springframework.web.servlet.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FrameworkServlet</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Post(FrameworkServlet.<span class="hljs-params">java</span>:901)</span>at javax.servlet.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpServlet</span>.</span></span>service(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpServlet</span>.</span></span>java:<span class="hljs-number">660</span>)at org.springframework.web.servlet.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FrameworkServlet</span>.</span></span>service(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FrameworkServlet</span>.</span></span>java:<span class="hljs-number">875</span>)at javax.servlet.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpServlet</span>.</span></span>service(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpServlet</span>.</span></span>java:<span class="hljs-number">741</span>)at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:231)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.apache.tomcat.websocket.server.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WsFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(WsFilter.<span class="hljs-params">java</span>:53)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at com.github.xiaoymin.swaggerbootstrapui.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityBasicAuthFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(SecurityBasicAuthFilter.<span class="hljs-params">java</span>:84)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at com.github.xiaoymin.swaggerbootstrapui.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProductionSecurityFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ProductionSecurityFilter.<span class="hljs-params">java</span>:53)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CorsFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">FilterInternal(CorsFilter.<span class="hljs-params">java</span>:96)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OncePerRequestFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(OncePerRequestFilter.<span class="hljs-params">java</span>:107)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">FilterInternal(RequestContextFilter.<span class="hljs-params">java</span>:99)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OncePerRequestFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(OncePerRequestFilter.<span class="hljs-params">java</span>:107)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FormContentFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">FilterInternal(FormContentFilter.<span class="hljs-params">java</span>:92)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OncePerRequestFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(OncePerRequestFilter.<span class="hljs-params">java</span>:107)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HiddenHttpMethodFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">FilterInternal(HiddenHttpMethodFilter.<span class="hljs-params">java</span>:93)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OncePerRequestFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(OncePerRequestFilter.<span class="hljs-params">java</span>:107)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CharacterEncodingFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">FilterInternal(CharacterEncodingFilter.<span class="hljs-params">java</span>:200)</span>at org.springframework.web.filter.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OncePerRequestFilter</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(OncePerRequestFilter.<span class="hljs-params">java</span>:107)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span>internal<span class="hljs-constructor">DoFilter(ApplicationFilterChain.<span class="hljs-params">java</span>:193)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ApplicationFilterChain</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ApplicationFilterChain.<span class="hljs-params">java</span>:166)</span>at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardWrapperValve</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardWrapperValve</span>.</span></span>java:<span class="hljs-number">199</span>)at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardContextValve</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardContextValve</span>.</span></span>java:<span class="hljs-number">96</span>)at org.apache.catalina.authenticator.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AuthenticatorBase</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AuthenticatorBase</span>.</span></span>java:<span class="hljs-number">490</span>)at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardHostValve</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardHostValve</span>.</span></span>java:<span class="hljs-number">139</span>)at org.apache.catalina.valves.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ErrorReportValve</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ErrorReportValve</span>.</span></span>java:<span class="hljs-number">92</span>)at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardEngineValve</span>.</span></span>invoke(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardEngineValve</span>.</span></span>java:<span class="hljs-number">74</span>)at org.apache.catalina.connector.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CoyoteAdapter</span>.</span></span>service(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CoyoteAdapter</span>.</span></span>java:<span class="hljs-number">343</span>)at org.apache.coyote.http11.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Http11Processor</span>.</span></span>service(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Http11Processor</span>.</span></span>java:<span class="hljs-number">408</span>)at org.apache.coyote.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractProcessorLight</span>.</span></span>process(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractProcessorLight</span>.</span></span>java:<span class="hljs-number">66</span>)at org.apache.coyote.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractProtocol$ConnectionHandler</span>.</span></span>process(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractProtocol</span>.</span></span>java:<span class="hljs-number">770</span>)at org.apache.tomcat.util.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NioEndpoint$SocketProcessor</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Run(NioEndpoint.<span class="hljs-params">java</span>:1415)</span>at org.apache.tomcat.util.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SocketProcessorBase</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SocketProcessorBase</span>.</span></span>java:<span class="hljs-number">49</span>)at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor</span>.</span></span>run<span class="hljs-constructor">Worker(ThreadPoolExecutor.<span class="hljs-params">java</span>:1142)</span>at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor$Worker</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor</span>.</span></span>java:<span class="hljs-number">617</span>)at org.apache.tomcat.util.threads.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TaskThread$WrappingRunnable</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TaskThread</span>.</span></span>java:<span class="hljs-number">61</span>)at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>java:<span class="hljs-number">745</span>)Caused by: java.net.NoRouteToHostException: No route <span class="hljs-keyword">to</span> host (Host unreachable)at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PlainSocketImpl</span>.</span></span>socket<span class="hljs-constructor">Connect(Native Method)</span>at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractPlainSocketImpl</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Connect(AbstractPlainSocketImpl.<span class="hljs-params">java</span>:350)</span>at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractPlainSocketImpl</span>.</span></span>connect<span class="hljs-constructor">ToAddress(AbstractPlainSocketImpl.<span class="hljs-params">java</span>:206)</span>at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractPlainSocketImpl</span>.</span></span>connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractPlainSocketImpl</span>.</span></span>java:<span class="hljs-number">188</span>)at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SocksSocketImpl</span>.</span></span>connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SocksSocketImpl</span>.</span></span>java:<span class="hljs-number">392</span>)at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>java:<span class="hljs-number">589</span>)at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Socket</span>.</span></span>java:<span class="hljs-number">538</span>)at sun.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NetworkClient</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">Connect(NetworkClient.<span class="hljs-params">java</span>:180)</span>at sun.net.www.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpClient</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">Server(HttpClient.<span class="hljs-params">java</span>:432)</span>at sun.net.www.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpClient</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">Server(HttpClient.<span class="hljs-params">java</span>:527)</span>at sun.net.www.http.HttpClient.&lt;init&gt;(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpClient</span>.</span></span>java:<span class="hljs-number">211</span>)at sun.net.www.http.HttpClient.<span class="hljs-constructor">New(HttpClient.<span class="hljs-params">java</span>:308)</span>at sun.net.www.http.HttpClient.<span class="hljs-constructor">New(HttpClient.<span class="hljs-params">java</span>:326)</span>at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>get<span class="hljs-constructor">NewHttpClient(HttpURLConnection.<span class="hljs-params">java</span>:1202)</span>at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>plain<span class="hljs-constructor">Connect0(HttpURLConnection.<span class="hljs-params">java</span>:1138)</span>at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>plain<span class="hljs-constructor">Connect(HttpURLConnection.<span class="hljs-params">java</span>:1032)</span>at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>connect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>java:<span class="hljs-number">966</span>)at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>get<span class="hljs-constructor">InputStream0(HttpURLConnection.<span class="hljs-params">java</span>:1546)</span>at sun.net.www.protocol.http.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HttpURLConnection</span>.</span></span>get<span class="hljs-constructor">InputStream(HttpURLConnection.<span class="hljs-params">java</span>:1474)</span>at java.net.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">Stream(URL.<span class="hljs-params">java</span>:1045)</span>at javax.imageio.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>read(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>java:<span class="hljs-number">1393</span>)<span class="hljs-operator">... </span><span class="hljs-number">70</span> common frames omitted</code></pre><blockquote><p>通过报错的开始可以定位：</p><pre><code class="hljs applescript">javax.imageio.IIOException: Can't <span class="hljs-keyword">get</span> input stream <span class="hljs-keyword">from</span> URL!<span class="hljs-keyword">at</span> javax.imageio.ImageIO.<span class="hljs-built_in">read</span>(ImageIO.java:<span class="hljs-number">1395</span>)</code></pre><p>查看定位的<code>ImageIO</code>的源码：</p><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123; istream = input.openStream();&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IIOException(<span class="hljs-string">"Can't get input stream from URL!"</span>, e);&#125;</code></pre><p>或者在报错的最后也可以看到<code>ImageIO</code>和<code>URL</code>源码的相关定位：</p><pre><code class="hljs css"><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">sun</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span><span class="hljs-selector-class">.getInputStream</span>(<span class="hljs-selector-tag">HttpURLConnection</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:1474)</span><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span><span class="hljs-selector-class">.openStream</span>(<span class="hljs-selector-tag">URL</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:1045)</span><span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">javax</span><span class="hljs-selector-class">.imageio</span><span class="hljs-selector-class">.ImageIO</span><span class="hljs-selector-class">.read</span>(<span class="hljs-selector-tag">ImageIO</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-pseudo">:1393)</span>... 70 <span class="hljs-selector-tag">common</span> <span class="hljs-selector-tag">frames</span> <span class="hljs-selector-tag">omitted</span></code></pre><p>所以换一种读取方式，来打印的更详细的报错信息。</p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> javax.imageio.ImageIO;<span class="hljs-comment">// x.x.x.x就是Server层的主机地址</span>URL imageUrl = <span class="hljs-string">"http://x.x.x.x/images/xxxx.jpg"</span><span class="hljs-comment">// openStream报错</span>ImageIO.read(imageUrl.openStream())</code></pre><pre><code class="hljs stylus">No route to host (Host unreachable)java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.NoRouteToHostException</span>: No route to host (Host unreachable)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.PlainSocketImpl</span>.socketConnect(Native Method)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.doConnect(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">350</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.connectToAddress(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">206</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.AbstractPlainSocketImpl</span>.connect(AbstractPlainSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">188</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocksSocketImpl</span>.connect(SocksSocketImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">392</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.connect(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">589</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span>.connect(Socket<span class="hljs-selector-class">.java</span>:<span class="hljs-number">538</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.NetworkClient</span>.doConnect(NetworkClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">180</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpClient</span>.openServer(HttpClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">432</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpClient</span>.openServer(HttpClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">527</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpClient</span>.&lt;init&gt;(HttpClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">211</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpClient</span>.New(HttpClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">308</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpClient</span>.New(HttpClient<span class="hljs-selector-class">.java</span>:<span class="hljs-number">326</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.getNewHttpClient(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1202</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.plainConnect0(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1138</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.plainConnect(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1032</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.connect(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">966</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.getInputStream0(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1546</span>)at sun<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.www</span><span class="hljs-selector-class">.protocol</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpURLConnection</span>.getInputStream(HttpURLConnection<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1474</span>)at java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>.openStream(URL<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1045</span>)at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span>.invoke0(Native Method)at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span>.invoke(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span>.invoke(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>)at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span>.invoke(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">498</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span>.doInvoke(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">215</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.InvocableHandlerMethod</span>.invokeForRequest(InvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">142</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.ServletInvocableHandlerMethod</span>.invokeAndHandle(ServletInvocableHandlerMethod<span class="hljs-selector-class">.java</span>:<span class="hljs-number">102</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span>.invokeHandlerMethod(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">895</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.annotation</span><span class="hljs-selector-class">.RequestMappingHandlerAdapter</span>.handleInternal(RequestMappingHandlerAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">800</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span><span class="hljs-selector-class">.AbstractHandlerMethodAdapter</span>.handle(AbstractHandlerMethodAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">87</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span>.doDispatch(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1038</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span>.doService(DispatcherServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">942</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span>.processRequest(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">998</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span>.doPost(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">901</span>)at javax<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span>.service(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">660</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.FrameworkServlet</span>.service(FrameworkServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">875</span>)at javax<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.HttpServlet</span>.service(HttpServlet<span class="hljs-selector-class">.java</span>:<span class="hljs-number">741</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">231</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.websocket</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.WsFilter</span>.doFilter(WsFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">53</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.xiaoymin</span><span class="hljs-selector-class">.swaggerbootstrapui</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.SecurityBasicAuthFilter</span>.doFilter(SecurityBasicAuthFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at com<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.xiaoymin</span><span class="hljs-selector-class">.swaggerbootstrapui</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.ProductionSecurityFilter</span>.doFilter(ProductionSecurityFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">53</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.CorsFilter</span>.doFilterInternal(CorsFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">96</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.RequestContextFilter</span>.doFilterInternal(RequestContextFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">99</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.FormContentFilter</span>.doFilterInternal(FormContentFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">92</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.HiddenHttpMethodFilter</span>.doFilterInternal(HiddenHttpMethodFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">93</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.CharacterEncodingFilter</span>.doFilterInternal(CharacterEncodingFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">200</span>)at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.OncePerRequestFilter</span>.doFilter(OncePerRequestFilter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.internalDoFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">193</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ApplicationFilterChain</span>.doFilter(ApplicationFilterChain<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardWrapperValve</span>.invoke(StandardWrapperValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">199</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardContextValve</span>.invoke(StandardContextValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">96</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.authenticator</span><span class="hljs-selector-class">.AuthenticatorBase</span>.invoke(AuthenticatorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">490</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardHostValve</span>.invoke(StandardHostValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">139</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.valves</span><span class="hljs-selector-class">.ErrorReportValve</span>.invoke(ErrorReportValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">92</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.StandardEngineValve</span>.invoke(StandardEngineValve<span class="hljs-selector-class">.java</span>:<span class="hljs-number">74</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span><span class="hljs-selector-class">.connector</span><span class="hljs-selector-class">.CoyoteAdapter</span>.service(CoyoteAdapter<span class="hljs-selector-class">.java</span>:<span class="hljs-number">343</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.http11</span><span class="hljs-selector-class">.Http11Processor</span>.service(Http11Processor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">408</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span><span class="hljs-selector-class">.AbstractProcessorLight</span>.process(AbstractProcessorLight<span class="hljs-selector-class">.java</span>:<span class="hljs-number">66</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.coyote</span>.AbstractProtocol<span class="hljs-variable">$ConnectionHandler</span>.process(AbstractProtocol<span class="hljs-selector-class">.java</span>:<span class="hljs-number">770</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span>.NioEndpoint<span class="hljs-variable">$SocketProcessor</span>.doRun(NioEndpoint<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1415</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocketProcessorBase</span>.run(SocketProcessorBase<span class="hljs-selector-class">.java</span>:<span class="hljs-number">49</span>)at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ThreadPoolExecutor</span>.runWorker(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1142</span>)at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.ThreadPoolExecutor<span class="hljs-variable">$Worker</span>.run(ThreadPoolExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">617</span>)at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.threads</span>.TaskThread<span class="hljs-variable">$WrappingRunnable</span>.run(TaskThread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>)at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span>.run(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)</code></pre><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><code>No route to host (Host unreachable)</code></p><ul><li>没有到主机的路由(主机不可到达)</li></ul><p>奇怪的问题就在这，为什么自己请求自己还不可达呢？</p><p>内网的防火墙都已经开放了这个访问端口，怎么还不通呢？</p><p>答案是Server服务器自带的<code>firewalld.service</code>已开启。</p><p><strong>解决方法：</strong></p><ul><li><p>直接关掉防火墙，但不安全，<code>不推荐</code></p><pre><code class="hljs sh">service firewalld stop<span class="hljs-comment"># or</span>systemctl stop firewalld.service</code></pre></li><li><p>使用<code>firewall-cmd</code>添加需要使用的端口，安全且便于管理已开放的端口号，<code>推荐</code></p><blockquote><p><strong>注意:</strong> 新增/删除端口需要重载/重启防火墙服务</p><pre><code class="hljs sh"><span class="hljs-comment"># 重载防火墙</span>firewall-cmd --reload<span class="hljs-comment"># 重启防火墙</span>service firewalld restart<span class="hljs-comment"># or</span>systemctl restart firewalld.service</code></pre></blockquote><pre><code class="hljs sh"><span class="hljs-comment"># 永久性开放一个端口</span>firewall-cmd --zone=public --add-port=8998/tcp --permanent<span class="hljs-comment"># 加载已添加端口</span>firewall-cmd --reload<span class="hljs-comment"># 查看防火墙开放的端口信息</span>firewall-cmd --list-ports<span class="hljs-comment"># 删除开放的端口信息</span>firewall-cmd --zone=public --remove-port=80/tcp --permanent<span class="hljs-comment"># 重载防火墙</span>firewall-cmd --reload<span class="hljs-comment"># 查看防火墙开放的端口信息</span>firewall-cmd --list-ports</code></pre></li></ul><p>至此，<code>No route to host (Host unreachable)</code>问题就迎刃而解了。</p>]]></content>
    
    
    <categories>
      
      <category>Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>Firewall</tag>
      
      <tag>Linux</tag>
      
      <tag>CentOS7</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Misc</title>
    <link href="/posts/1577809488/"/>
    <url>/posts/1577809488/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-札记"><a href="#Docker-札记" class="headerlink" title="Docker 札记"></a>Docker 札记</h1><p><img src="https://filein.oss-cn-hangzhou.aliyuncs.com/chaos/one/docker-begin.png" srcset="/img/loading.gif" alt="docker-begin"></p><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><pre><code class="hljs sh"><span class="hljs-comment"># 复制docker文件到宿主机</span>docker cp mycontainer:/opt/file.txt /opt/<span class="hljs-built_in">local</span>/<span class="hljs-comment"># 复制宿主机文件到docker</span>docker cp /opt/<span class="hljs-built_in">local</span>/file.txt mycontainer:/opt/</code></pre><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><blockquote><p>想查看在创建容器时有哪些可用的选项，可以执行：</p></blockquote><pre><code class="hljs sh">docker run -it --rm image:tag --verbose --<span class="hljs-built_in">help</span></code></pre><h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><blockquote><p>清理所有停止运行的容器：</p></blockquote><pre><code class="hljs sh">docker container prune<span class="hljs-comment"># or</span>docker rm $(docker ps -aq)</code></pre><blockquote><p>清理所有悬挂（``）镜像：</p></blockquote><pre><code class="hljs sh">docker image prune<span class="hljs-comment"># or</span>docker rmi $(docker images -qf <span class="hljs-string">"dangling=true"</span>)</code></pre><blockquote><p>清理所有无用数据卷：</p></blockquote><pre><code class="hljs sh">docker volume prune</code></pre><p>由于<code>prune</code>操作是批量删除类的危险操作，所以会有一次确认。 如果不想输入<code>y</code>来确认，可以添加<code>-f</code>操作。慎用！</p><h3 id="清理停止的容器"><a href="#清理停止的容器" class="headerlink" title="清理停止的容器"></a>清理停止的容器</h3><pre><code class="hljs sh">docker rm -lv CONTAINER</code></pre><p><code>-l</code>是清理link，<code>v</code>是清理volume。 这里的CONTAINER是容器的name或ID，可以是一个或多个。</p><p>参数列表：</p><table><thead><tr><th>Name, shorthand</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>–force, -f</td><td>false</td><td>Force the removal of a running container (uses SIGKILL)</td></tr><tr><td>–link, -l</td><td>false</td><td>Remove the specified link</td></tr><tr><td>–volumes, -v</td><td>false</td><td>Remove the volumes associated with the container</td></tr></tbody></table><h3 id="清理所有停止的容器"><a href="#清理所有停止的容器" class="headerlink" title="清理所有停止的容器"></a>清理所有停止的容器</h3><p>通过<code>docker ps</code>可以查询当前运行的容器信息。 而通过<code>docker ps -a</code>，可以查询所有的容器信息，包括已停止的。</p><p>在需要清理所有已停止的容器时，通常利用shell的特性，组合一下就好。</p><pre><code class="hljs sh">docker rm $(docker ps -aq)</code></pre><p>其中，<code>ps</code>的<code>-q</code>，是只输出容器ID，方便作为参数让<code>rm</code>使用。 假如给<code>rm</code>指定<code>-f</code>，则可以清理所有容器，包括正在运行的。</p><p>这条组合命令，等价于另一条命令：</p><pre><code class="hljs sh">docker container prune</code></pre><p><code>container</code>子命令，下面包含了所有和容器相关的子命令。 包括<code>docker ps</code>，等价于<code>docker container ps</code>或<code>docker container ls</code>。 其余还有<code>start</code>、<code>stop</code>、<code>kill</code>、<code>cp</code>等，一级子命令相当于二级子命令在外面的alias。 而<code>prune</code>则是特别提供的清理命令，这在其它的管理命令里还可以看到，比如<code>image</code>、<code>volume</code>。</p><h3 id="按需批量清理容器"><a href="#按需批量清理容器" class="headerlink" title="按需批量清理容器"></a>按需批量清理容器</h3><p>清除所有已停止的容器，是比较常用的清理。 但有时会需要做一些特殊过滤。</p><p>这时就需要使用<code>docker ps --filter</code>。</p><p>比如，显示所有返回值为0，即正常退出的容器：</p><pre><code class="hljs sh">docker ps -a --filter <span class="hljs-string">'exited=0'</span></code></pre><p>同理，可以得到其它非正常退出的容器。</p><p>目前支持的过滤器有：</p><blockquote><ul><li>id (container’s id)</li><li>label (<code>label=</code> or <code>label==</code>)</li><li>name (container’s name)</li><li>exited (int - the code of exited containers. Only useful with –all)</li><li>status (<code>created|restarting|running|removing|paused|exited|dead</code>)</li><li>ancestor (<code>[:]</code>, <code>or</code>) - filters containers that were created from the given image or a descendant.</li><li>before (container’s id or name) - filters containers created before given id or name</li><li>since (container’s id or name) - filters containers created since given id or name</li><li>isolation (<code>default|process|hyperv</code>) (Windows daemon only)</li><li>volume (volume name or mount point) - filters containers that mount volumes.</li><li>network (network id or name) - filters containers connected to the provided network</li><li>health (<code>starting|healthy|unhealthy|none</code>) - filters containers based on healthcheck status</li></ul></blockquote><h3 id="清理失败"><a href="#清理失败" class="headerlink" title="清理失败"></a>清理失败</h3><p>如果在清理容器时发生失败，通过重启Docker的Daemon，应该都能解决问题。</p><pre><code class="hljs sh"><span class="hljs-comment"># systemd</span>sudo systemctl restart docker.service<span class="hljs-comment"># initd</span>sudo service docker restart</code></pre><h3 id="清理镜像"><a href="#清理镜像" class="headerlink" title="清理镜像"></a>清理镜像</h3><p>与清理容器的<code>ps</code>、<code>rm</code>类似，清理镜像也有<code>images</code>、<code>rmi</code>两个子命令。 <code>images</code>用来查看，<code>rmi</code>用来删除。</p><p>清理镜像前，应该确保该镜像的容器，已经被清除。</p><pre><code class="hljs sh">docker rmi IMAGE</code></pre><p>其中，IMAGE可以是name或ID。 如果是name，不加TAG可以删除所有TAG。</p><p>另外，这两个命令也都属于alias。 <code>docker images</code>等价于<code>docker image ls</code>，而<code>docker rmi</code>等价于<code>docker image rm</code>。</p><h3 id="按需批量清理镜像"><a href="#按需批量清理镜像" class="headerlink" title="按需批量清理镜像"></a>按需批量清理镜像</h3><p>与<code>ps</code>类似，<code>images</code>也支持<code>--filter</code>参数。</p><p>与清理相关，最常用的，当属``了。</p><pre><code class="hljs sh">docker images --filter <span class="hljs-string">"dangling=true"</span></code></pre><p>这条命令，可以列出所有悬挂（dangling）的镜像，也就是显示为``的那些。</p><pre><code class="hljs sh">docker rmi $(docker images -qf <span class="hljs-string">"dangling=true"</span>)</code></pre><p>这条组合命令，如果不写入Bash的alias，几乎无法使用。 不过还有一条等价命令，非常容易使用。</p><pre><code class="hljs sh">docker image prune</code></pre><p><code>prune</code>和<code>images</code>类似，也同样支持<code>--filter</code>参数。 其它的filter有：</p><blockquote><ul><li>dangling (boolean - true or false)</li><li>label (<code>label=</code> or <code>label==</code>)</li><li>before (<code>[:]</code>, <code>or</code>) - filter images created before given id or references</li><li>since (<code>[:]</code>, <code>or</code>) - filter images created since given id or references</li><li>reference (pattern of an image reference) - filter images whose reference matches the specified pattern</li></ul></blockquote><h3 id="清理所有无用镜像"><a href="#清理所有无用镜像" class="headerlink" title="清理所有无用镜像"></a>清理所有无用镜像</h3><p>这招要慎用，否则需要重新下载。</p><pre><code class="hljs sh">docker image prune -a</code></pre><h3 id="清理数据卷"><a href="#清理数据卷" class="headerlink" title="清理数据卷"></a>清理数据卷</h3><p>数据卷不如容器或镜像那样显眼，但占的硬盘却可大可小。</p><p>数据卷的相关命令，都在<code>docker volume</code>中了。</p><p>一般用<code>docker volume ls</code>来查看，用<code>docker volume rm VOLUME</code>来删除一个或多个。</p><p>不过，绝大多数情况下，不需要执行这两个命令的组合。 直接执行<code>docker volume prune</code>就好，即可删除所有无用卷。</p><p>注意：<strong>这是一个危险操作！甚至可以说，这是本文中最危险的操作！</strong> 一般真正有价值的运行数据，都在数据卷中。 （当然也可能挂载到了容器外的文件系统里，那就没关系。） 如果在关键服务停止期间，执行这个操作，很可能会<strong>丢失所有数据</strong>！</p><h3 id="从文件系统删除"><a href="#从文件系统删除" class="headerlink" title="从文件系统删除"></a>从文件系统删除</h3><p>除配置文件以为，Docker的内容相关文件，基本都放在<code>/var/lib/docker/</code>目录下。</p><p>该目录下有下列子目录，基本可以猜测出用途：</p><blockquote><ul><li>aufs</li><li>containers</li><li>image</li><li>network</li><li>plugins</li><li>swarm</li><li>tmp</li><li>trust</li><li>volumes</li></ul></blockquote><p>一般不推荐直接操作这些目录，除非一些极特殊情况。 操作不当，后果难料，需要慎重。</p><h2 id="docker-save-和-docker-load"><a href="#docker-save-和-docker-load" class="headerlink" title="docker save 和 docker load"></a><code>docker save</code> 和 <code>docker load</code></h2><p>Docker 还提供了 <code>docker save</code> 和 <code>docker load</code> 命令，用以将镜像保存为一个文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。</p><h3 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h3><p>使用 <code>docker save</code> 命令可以将镜像保存为归档文件。</p><p>比如我们希望保存这个 <code>alpine</code> 镜像。</p><pre><code class="hljs bash">$ docker image ls alpineREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              latest              baa5d63471ea        5 weeks ago         4.803 MB</code></pre><p>保存镜像的命令为：</p><pre><code class="hljs bash">$ docker save alpine -o filename$ file filenamefilename: POSIX tar archive</code></pre><p>这里的 filename 可以为任意名称甚至任意后缀名，但文件的本质都是归档文件</p><p><strong>注意：如果同名则会覆盖（没有警告）</strong></p><p>若使用 <code>gzip</code> 压缩：</p><pre><code class="hljs bash">$ docker save alpine | gzip &gt; alpine-latest.tar.gz</code></pre><p>然后我们将 <code>alpine-latest.tar.gz</code> 文件复制到了到了另一个机器上，可以用下面这个命令加载镜像：</p><pre><code class="hljs bash">$ docker load -i alpine-latest.tar.gzLoaded image: alpine:latest</code></pre><p>如果我们结合这两个命令以及 <code>ssh</code> 甚至 <code>pv</code> 的话，利用 Linux 强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：</p><pre><code class="hljs bash">docker save &lt;镜像名&gt; | bzip2 | pv | ssh &lt;用户名&gt;@&lt;主机名&gt; <span class="hljs-string">'cat | docker load'</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>DDDD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
